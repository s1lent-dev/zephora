import { z } from "zod";

export const userSchema = z.object({
    googleId: z.string().nullable(),
    githubId: z.string().nullable(),
    firstName: z.string().min(2).max(24).nullable(),
    lastName: z.string().min(2).max(24).nullable(),
    username: z.string().min(6).max(24),
    email: z.string().email().refine((email) => email.endsWith('@gmail.com'), {
        message: "Email must be a valid Gmail address !",
    }),
    password: z.string().min(8).regex(/^(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#$%^&*.]).{8,}$/, {message: "Password must contain at least one uppercase letter, one lowercase letter, one number and one special character !"}),
    gender: z.enum(["male", "female"]).optional(),
    dob: z.date().optional(),
    phone: z.string().regex(/^[0-9]{10}$/, {message: "Enter a valid phone number !"}).optional(),
    address: z.string().optional(),
    location: z.string().optional(),
    avatar: z.string().optional(),
    role: z.enum(["user", "recruiter"]).optional(),
    profile: z.object({
        bio: z.string().optional(),
        skills: z.array(z.string()).optional(),
        social: z.object({
            twitter: z.string().url().optional(),
            github: z.string().url().optional(),
            linkedin: z.string().url().optional(),
            leetcode: z.string().url().optional(),
        }).optional(),
        education: z.array(z.object({
            qualification: z.string().optional(),
            degree: z.string().optional(),
            stream: z.string().optional(),
            institute: z.string().optional(),
            cgpa: z.number().optional(),
            start: z.date().optional(),
            end: z.date().optional(),
        })).optional(),
        experience: z.array(z.object({
            title: z.string().optional(),
            company: z.string().optional(),
            location: z.string().optional(),
            start: z.date().optional(),
            end: z.date().optional(),
            current: z.boolean().optional(),
            description: z.string().optional(),
        })).optional(),
    }).optional(),
    company: z.string().uuid("The CompanyId must be a valid uuid String").optional(),
    appliedJobs: z.array(z.string().uuid("The JobId must be a valid uuid String")).optional(),
    savedJobs: z.array(z.string().uuid("The JobId must be a valid uuid String")).optional(),
    refreshToken: z.string().optional(),
    createdAt: z.date().optional(),
    updatedAt: z.date().optional(),
})